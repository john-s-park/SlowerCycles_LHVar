f_nocontrol.summary$var <- (f_nocontrol.summary$sd)^2
f_nocontrol.summary
head(f_nocontrol)
mumean_end
muvar_fastfluc_end <- sapply(fastfluc_rlzs_muVAR, function(x) tail(x,1))
getwd()
slowfluc_rlzs_muVAR_melt <- read.csv("slowfluc_rlzs_muVAR_melt.csv")
fastfluc_rlzs_muVAR_melt <- read.csv("fastfluc_rlzs_muVAR_melt.csv")
slowstochc_rlzs_muVAR_melt <- read.csv("slowstoch_rlzs_muVAR_melt.csv")
faststochc_rlzs_muVAR_melt <- read.csv("faststoch_rlzs_muVAR_melt.csv")
slowfluc_rlzs_fVAR_melt <- read.csv("slowfluc_rlzs_fVAR_melt.csv")
fastfluc_rlzs_fVAR_melt <- read.csv("fastfluc_rlzs_fVAR_melt.csv")
slowstoch_rlzs_muVAR_melt <- read.csv("slowstoch_rlzs_muVAR_melt.csv")
faststoch_rlzs_muVAR_melt <- read.csv("faststoch_rlzs_muVAR_melt.csv")
slowstoch_rlzs_fVAR_melt <- read.csv("slowstoch_rlzs_fVAR_melt.csv")
faststoch_rlzs_fVAR_melt <- read.csv("faststoch_rlzs_fVAR_melt.csv")
mumean_fastfluc_end <- sapply(fastfluc_rlzs_muMEAN, function(x) tail(x,1))
mumean_slowfluc_end <- sapply(slowfluc_rlzs_muMEAN, function(x) tail(x,1))
mumean_slowstoch_end <- sapply(slowstoch_rlzs_muMEAN, function(x) tail(x,1))
mumean_faststoch_end <- sapply(faststoch_rlzs_muMEAN, function(x) tail(x,1))
fmean_fastfluc_end <- sapply(fastfluc_rlzs_fMEAN, function(x) tail(x,1))
fmean_slowfluc_end <- sapply(slowfluc_rlzs_fMEAN, function(x) tail(x,1))
fmean_slowstoch_end <- sapply(slowstoch_rlzs_fMEAN, function(x) tail(x,1))
fmean_faststoch_end <- sapply(faststoch_rlzs_fMEAN, function(x) tail(x,1))
muvar_fastfluc_end <- sapply(fastfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowfluc_end <- sapply(slowfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowstoch_end <- sapply(slowstoch_rlzs_muVAR, function(x) tail(x,1))
muvar_faststoch_end <- sapply(faststoch_rlzs_muVAR, function(x) tail(x,1))
fvar_fastfluc_end <- sapply(fastfluc_rlzs_fVAR, function(x) tail(x,1))
fvar_slowfluc_end <- sapply(slowfluc_rlzs_fVAR, function(x) tail(x,1))
fvar_slowstoch_end <- sapply(slowstoch_rlzs_fVAR, function(x) tail(x,1))
fvar_faststoch_end <- sapply(faststoch_rlzs_fVAR, function(x) tail(x,1))
muvar_fastfluc_end <- sapply(fastfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowfluc_end <- sapply(slowfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowstoch_end <- sapply(slowstoch_rlzs_muVAR, function(x) tail(x,1))
muvar_faststoch_end <- sapply(faststoch_rlzs_muVAR, function(x) tail(x,1))
set.seed(5)
num_real <- 100
num_steps <- 150
slow_num_geno <- 5000
#slow_mu_init <- seq(0.02, 0.04, length.out = slow_num_geno)
#slow_f_init <- c(1/(slow_mu_init*4))
#slow_states_init <- sample(rep(c(runif(25, 0, 1.0), runif(1, 1.0, 3.0)), length.out = slow_num_geno)) #65:1 juv:adult ratio (approx stable stage dist given simulations), but random within each class.
fast_num_geno <- 5000
#fast_mu_init <- seq(0.02, 0.04, length.out = fast_num_geno)
#fast_f_init <- c(1/(fast_mu_init*4))
#fast_states_init <- sample(rep(c(runif(25, 0, 1.0), runif(1, 1.0, 3.0)), length.out = fast_num_geno)) #65:1 juv:adult ratio (approx stable stage dist given simulations), but random within each class.
sexually_mature <- 1.0
death_state <-  3.0
#disturbance-associated stage-specific mortalities
dist_juvmort <- 0.3
dist_adultmort <- 0.00
#mutation rates
mu_mutation_rate <- 0.01
f_mutation_rate <- 0.01
#disturbance frequency
freq_slow <- 14 #set deterministic slow frequency
freq_fast <- 3 #set deterministic fast frequency
#create sets of stochastic disturbance sequences, where total # of disturbance equals that of the SLOW case
slowstoch <- matrix(NA, nrow = num_real, floor(num_steps/freq_slow))
for (i in 1: nrow(slowstoch)){
slowstoch[i,] <- c(sort(sample(1:num_steps, floor(num_steps/freq_slow))))
}
#create sets of stochastic disturbance sequences, where total # of disturbance equals that of the FAST case
faststoch <- matrix(NA, nrow = num_real, floor(num_steps/freq_fast))
for (i in 1: nrow(faststoch)){
faststoch[i,] <- c(sort(sample(1:num_steps, floor(num_steps/freq_fast))))
}
#### SLOW FLUCTUATION SIMULATION ####
slowfluc_rlzs_muMEAN <- list()
slowfluc_rlzs_muVAR <- list()
slowfluc_rlzs_fMEAN <- list()
slowfluc_rlzs_fVAR <- list()
for (r in 1:num_real){
slow_mu_init <- sample(seq(0.02, 0.04, length.out = slow_num_geno*10), slow_num_geno, replace = T)
slow_f_init <- c(1/(slow_mu_init*4))
slow_states_init <-  rep(c(runif(25, 0, sexually_mature), runif(1, sexually_mature, death_state)), length.out = slow_num_geno)
sim_slowfluc.ls <- list()
sim_slowfluc.ls[[1]] <- cbind(slow_mu_init, slow_f_init, slow_states_init)
for (i in 1:num_steps){
mu_distr <- c(sim_slowfluc.ls[[i]][,1]) #copy distribution of mu genotypes from previous time step
f_distr <- c(sim_slowfluc.ls[[i]][,2]) #copy distribution of f genotypes from previous time step
states_distr <- c(sim_slowfluc.ls[[i]][,3] + sim_slowfluc.ls[[i]][,1]) #update state of each genotype by growth rate mu
current <- cbind(mu_distr, f_distr, states_distr) #collection of surviving genotypes and their states BEFORE death or repro events
#Juvenile mu & Adult f trading off with respective survival probabilities IN THE ABSENCE OF DISTURBANCE
juv_indices <- which(current[,3] < sexually_mature)
juv_mus <- current[juv_indices, 1, drop = FALSE]
#draw from poisson distribution with lambda = d (juvenile background mortality, which increases as mu increases)
juv_fates <- cbind(juv_indices, juv_mus, rpois(length(juv_mus), juv_mus*5)) # mu X 5 is roughly the range of 'd' in original analytical model
juv_fates[,3][which(juv_fates[,3] > 0)] <- 1 #any number of poisson 'events' (non-zero value) counts as death, so just call it '1'
surviving_juvs <- juv_fates[which(juv_fates[,3] == 0), 1]
adult_indices <- which(current[,3] >= sexually_mature)
adult_fs <- current[adult_indices, 2, drop = FALSE]
adult_fates <- cbind(adult_indices, adult_fs, rpois(length(adult_fs), adult_fs*0.001))
adult_fates[,3][which(adult_fates[,3] > 0)] <- 1
surviving_adults <- adult_fates[which(adult_fates[,3] == 0), 1]
current <- current[c(surviving_juvs, surviving_adults), , drop = FALSE]
#DENSITY-DEPENDENT MORTALITY
density <- nrow(current)
density_mort <- density * (0.001 * (1 + (2 * (density/500000)))) # base mortality * (1 + (density-dependence * (density / K)))
density_mort_fates <- sample(density, density_mort)
if (length(density_mort_fates) > 0){
current <- current[-density_mort_fates, , drop = FALSE]
}
#DISTURBANCE DEATH EVENTS (this introduces ADDITIONAL mortality on top of background mortality)
if (i%%freq_slow == 0){ #at every time step corresponding to disturbance frequency
#juvenile deaths
too_young <- which(current[,3] < sexually_mature) #index of individuals that are JUVENILES at current (vulnerable to juvenile mortality)
juv_deaths <- sample(too_young, dist_juvmort*length(too_young)) #random dist_juvmort% sample of juveniles
if (length(juv_deaths) != 0){ #as long as there are some to kill,
current <- current[-juv_deaths, , drop = FALSE] #then kill random % of juveniles
}
#adult deaths
old_enough <- which(current[,3] >= sexually_mature) #index of individuals that are ADULTS at current (vulnerable to adult mortality)
adult_deaths <- sample(old_enough, dist_adultmort*length(old_enough)) #random % sample of adults
if (length(adult_deaths) != 0){ #as long as there are some to kill,
current <- current[-adult_deaths, , drop = FALSE] #then kill random % of adults
}
}
#END OF LIFE
end_of_life <- which(current[,3] >= death_state) #any individual that reaches death state
if (length(end_of_life) != 0){ #as long as there are any that have reached max life span of 1.5
current <- current[-end_of_life, , drop = FALSE] #those individuals are taken out of the population
}
#BIRTH EVENTS
old_enough <- which(current[,3] >= sexually_mature) #any individual that reaches age of first reproduction (0.5)
if (length(old_enough) != 0){ #as long as there are any such old_enough individuals
fecund_adults <- current[old_enough, , drop = FALSE]
fecund_adults[,2][which(fecund_adults[,2] < 0)] <- 0 #due to inheritance error, there are occassionally individuals with 'negative f', which causes errors in Poisson sampling in the next line; therefore make them f= 0
fecund_adults <- cbind(fecund_adults, rpois(nrow(fecund_adults), fecund_adults[,2]))
new_births <- fecund_adults[rep(seq(nrow(fecund_adults)), fecund_adults[,4]),] #reproduction = make N copies of old_enough individuals, where N = each old_enough individual's 'f' value
new_births <- new_births[,c(1:3), drop = FALSE]
#MUTATION -- add error to mu and f values in just-born offspring
#for each entry in new_births, add normally distributed error with mean 0 and sd that scales to each entry
new_births[,2] <- 1/(new_births[,1]*4)
new_births[,1] <- new_births[,1] + rnorm(length(new_births[,1]), mean = 0, sd = mu_mutation_rate*mean(slow_mu_init)) #add noise to mu of offspring
new_births[,2] <- new_births[,2] + rnorm(length(new_births[,2]), mean = 0, sd = f_mutation_rate*mean(slow_f_init))
new_births[,3] <- 0 # ALL OFFPSRING START AT STATE = 0
current <- rbind(current, new_births)
}
#after all above events, below is the final current state
sim_slowfluc.ls[[i+1]] <- current
}
slowfluc_rlzs_muMEAN[[r]]<- sapply(sim_slowfluc.ls, function(x) mean(x[,1]))
slowfluc_rlzs_muVAR[[r]]<- sapply(sim_slowfluc.ls, function(x) var(x[,1]))
slowfluc_rlzs_fMEAN[[r]] <- sapply(sim_slowfluc.ls, function(x) mean(x[,2]))
slowfluc_rlzs_fVAR[[r]] <- sapply(sim_slowfluc.ls, function(x) var(x[,2]))
}
###########################################################
#### FAST FLUCTUATION SIMULATION ####
fastfluc_rlzs_muMEAN <- list()
fastfluc_rlzs_muVAR <- list()
fastfluc_rlzs_fMEAN <- list()
fastfluc_rlzs_fVAR <- list()
for (r in 1:num_real){
fast_mu_init <- sample(seq(0.02, 0.04, length.out = fast_num_geno*10), fast_num_geno, replace = T)
fast_f_init <- c(1/(fast_mu_init*4))
fast_states_init <-  rep(c(runif(25, 0, sexually_mature), runif(1, sexually_mature, death_state)), length.out = fast_num_geno)
sim_fastfluc.ls <- list()
sim_fastfluc.ls[[1]] <- cbind(fast_mu_init, fast_f_init, fast_states_init)
for (i in 1:num_steps){
mu_distr <- c(sim_fastfluc.ls[[i]][,1]) #copy distribution of mu genotypes from previous time step
f_distr <- c(sim_fastfluc.ls[[i]][,2]) #copy distribution of f genotypes from previous time step
states_distr <- c(sim_fastfluc.ls[[i]][,3] + sim_fastfluc.ls[[i]][,1]) #update state of each genotype by growth rate mu
current <- cbind(mu_distr, f_distr, states_distr) #collection of surviving genotypes and their states BEFORE death or repro events
#Juvenile mu & Adult f trading off with respective survival probabilities IN THE ABSENCE OF DISTURBANCE
juv_indices <- which(current[,3] < sexually_mature)
juv_mus <- current[juv_indices, 1, drop = FALSE]
#draw from poisson distribution with lambda = d (juvenile background mortality, which increases as mu increases)
juv_fates <- cbind(juv_indices, juv_mus, rpois(length(juv_mus), juv_mus*5)) # mu X 5 is roughly the range of 'd' in original analytical model
juv_fates[,3][which(juv_fates[,3] > 0)] <- 1 #any number of poisson 'events' (non-zero value) counts as death, so just call it '1'
surviving_juvs <- juv_fates[which(juv_fates[,3] == 0), 1]
adult_indices <- which(current[,3] >= sexually_mature)
adult_fs <- current[adult_indices, 2, drop = FALSE]
adult_fates <- cbind(adult_indices, adult_fs, rpois(length(adult_fs), adult_fs*0.001))
adult_fates[,3][which(adult_fates[,3] > 0)] <- 1
surviving_adults <- adult_fates[which(adult_fates[,3] == 0), 1]
current <- current[c(surviving_juvs, surviving_adults), , drop = FALSE]
#DENSITY-DEPENDENT MORTALITY
density <- nrow(current)
density_mort <- density * (0.001 * (1 + (2 * (density/500000)))) # base mortality * (1 + (density-dependence * (density / K)))
density_mort_fates <- sample(density, density_mort)
if (length(density_mort_fates) > 0){
current <- current[-density_mort_fates, , drop = FALSE]
}
#DISTURBANCE DEATH EVENTS (this introduces ADDITIONAL mortality on top of background mortality)
if (i%%freq_fast == 0){ #at every time step corresponding to disturbance frequency
#juvenile deaths
too_young <- which(current[,3] < sexually_mature) #index of individuals that are JUVENILES at current (vulnerable to juvenile mortality)
juv_deaths <- sample(too_young, dist_juvmort*length(too_young)) #random dist_juvmort% sample of juveniles
if (length(juv_deaths) != 0){ #as long as there are some to kill,
current <- current[-juv_deaths, , drop = FALSE] #then kill random % of juveniles
}
#adult deaths
old_enough <- which(current[,3] >= sexually_mature) #index of individuals that are ADULTS at current (vulnerable to adult mortality)
adult_deaths <- sample(old_enough, dist_adultmort*length(old_enough)) #random % sample of adults
if (length(adult_deaths) != 0){ #as long as there are some to kill,
current <- current[-adult_deaths, , drop = FALSE] #then kill random % of adults
}
}
#END OF LIFE
end_of_life <- which(current[,3] >= death_state) #any individual that reaches state of 2.5
if (length(end_of_life) != 0){ #as long as there are any that have reached max life span of 1.5
current <- current[-end_of_life,, drop = FALSE] #those individuals are taken out of the population
}
#BIRTH EVENTS
old_enough <- which(current[,3] >= sexually_mature) #any individual that reaches age of first reproduction (0.5)
if (length(old_enough) != 0){ #as long as there are any such old_enough individuals
fecund_adults <- current[old_enough, , drop = FALSE]
fecund_adults[,2][which(fecund_adults[,2] < 0)] <- 0 #due to inheritance error, there are occassionally individuals with 'negative f', which causes errors in Poisson sampling in the next line; therefore make them f= 0
fecund_adults <- cbind(fecund_adults, rpois(nrow(fecund_adults), fecund_adults[,2]))
new_births <- fecund_adults[rep(seq(nrow(fecund_adults)), fecund_adults[,4]), ] #reproduction = make N copies of old_enough individuals, where N = each old_enough individual's 'f' value
new_births <- new_births[,1:3, drop = FALSE]
#MUTATION -- add error to mu and f values in just-born offspring
#for each entry in new_births, add normally distributed error with mean 0 and sd that scales to each entry
new_births[,2] <- 1/(new_births[,1]*4)
new_births[,1] <- new_births[,1] + rnorm(length(new_births[,1]), mean = 0, sd = mu_mutation_rate*mean(fast_mu_init)) #add noise to mu of offspring
new_births[,2] <- new_births[,2] + rnorm(length(new_births[,2]), mean = 0, sd = f_mutation_rate*mean(fast_f_init))
new_births[,3] <- 0 # ALL OFFPSRING START AT STATE = 0
current <- rbind(current, new_births)
}
#after all above events, below is the final current state
sim_fastfluc.ls[[i+1]] <- current
}
fastfluc_rlzs_muMEAN[[r]] <- sapply(sim_fastfluc.ls, function(x) mean(x[,1]))
fastfluc_rlzs_muVAR[[r]] <- sapply(sim_fastfluc.ls, function(x) var(x[,1]))
fastfluc_rlzs_fMEAN[[r]] <- sapply(sim_fastfluc.ls, function(x) mean(x[,2]))
fastfluc_rlzs_fVAR[[r]] <- sapply(sim_fastfluc.ls, function(x) var(x[,2]))
}
muvar_fastfluc_end <- sapply(fastfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowfluc_end <- sapply(slowfluc_rlzs_muVAR, function(x) tail(x,1))
fvar_fastfluc_end <- sapply(fastfluc_rlzs_fVAR, function(x) tail(x,1))
fvar_slowfluc_end <- sapply(slowfluc_rlzs_fVAR, function(x) tail(x,1))
t.test(log(muvar_slowfluc_end), log(muvar_fastfluc_end), var.equal = F, na.action = na.omit)
shapiro.test(log(muvar_slowfluc_end))
shapiro.test(log(fvar_slowfluc_end))
shapiro.test(log(muvar_fastfluc_end))
shapiro.test(log(fvar_fastfluc_end))
hist(log(fvar_fastfluc_end))
hist(log(fvar_fastfluc_end), breaks = 100)
hist(fvar_fastfluc_end, breaks = 100)
shapiro.test(log(fvar_fastfluc_end))
shapiro.test(fvar_fastfluc_end)
shapiro.test(muvar_fastfluc_end)
shapiro.test(fvar_slowfluc_end)
shapiro.test(muvar_slowfluc_end)
qqnorm(muvar_fastfluc_end)
qqnorm(muvar_fastfluc_end, pch = 19)
qqnorm(fvar_fastfluc_end, pch = 19)
ks.test(fvar_fastfluc_end)
ks.test(fvar_fastfluc_end, "pnorm")
qqline(normalizePath())
qqnorm(log(muvar_slowfluc_end))
qqline(log(muvar_slowfluc_end))
qqnorm(log(muvar_fastfluc_end))
qqline(log(muvar_fastfluc_end))
qqnorm(log(fvar_slowfluc_end))
qqnorm(log(fvar_fastfluc_end))
qqline(log(fvar_fastfluc_end))
wilcox.test(log(muvar_slowfluc_end), log(muvar_fastfluc_end), var.equal = F, na.action = na.omit)
wilcox.test(log(muvar_slowstoch_end), log(muvar_faststoch_end), var.equal = F, na.action = na.omit)
wilcox.test(log(muvar_slowfluc_end), log(muvar_slowstoch_end), var.equal = F, na.action = na.omit)
wilcox.test(log(muvar_fastfluc_end), log(muvar_faststoch_end), var.equal = F, na.action = na.omit)
muvar_fastfluc_end <- sapply(fastfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowfluc_end <- sapply(slowfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowstoch_end <- sapply(slowstoch_rlzs_muVAR, function(x) tail(x,1))
muvar_faststoch_end <- sapply(faststoch_rlzs_muVAR, function(x) tail(x,1))
wilcox.test(log(fvar_slowfluc_end), log(fvar_fastfluc_end), var.equal = F, na.action = na.omit)
slowstoch_rlzs_muMEAN <- list()
slowstoch_rlzs_muVAR <- list()
slowstoch_rlzs_fMEAN <- list()
slowstoch_rlzs_fVAR <- list()
for (r in 1:num_real){
slowstoch_mu_init <- sample(seq(0.02, 0.04, length.out = slow_num_geno*10), slow_num_geno, replace = T)
slowstoch_f_init <- c(1/(slow_mu_init*4))
slowstoch_states_init <-  rep(c(runif(25, 0, sexually_mature), runif(1, sexually_mature, death_state)), length.out = slow_num_geno)
sim_slowstoch.ls <- list()
sim_slowstoch.ls[[1]] <- cbind(slowstoch_mu_init, slowstoch_f_init, slowstoch_states_init)
for (i in 1:num_steps){
mu_distr <- c(sim_slowstoch.ls[[i]][,1]) #copy distribution of mu genotypes from previous time step
f_distr <- c(sim_slowstoch.ls[[i]][,2]) #copy distribution of f genotypes from previous time step
states_distr <- c(sim_slowstoch.ls[[i]][,3] + sim_slowstoch.ls[[i]][,1]) #update state of each genotype by growth rate mu
current <- cbind(mu_distr, f_distr, states_distr) #collection of surviving genotypes and their states BEFORE death or repro events
#Juvenile mu & Adult f trading off with respective survival probabilities IN THE ABSENCE OF DISTURBANCE
juv_indices <- which(current[,3] < sexually_mature)
juv_mus <- current[juv_indices, 1, drop = FALSE]
#draw from poisson distribution with lambda = d (juvenile background mortality, which increases as mu increases)
juv_fates <- cbind(juv_indices, juv_mus, rpois(length(juv_mus), juv_mus*5)) # mu X 5 is roughly the range of 'd' in original analytical model
juv_fates[,3][which(juv_fates[,3] > 0)] <- 1 #any number of poisson 'events' (non-zero value) counts as death, so just call it '1'
surviving_juvs <- juv_fates[which(juv_fates[,3] == 0), 1]
adult_indices <- which(current[,3] >= sexually_mature)
adult_fs <- current[adult_indices, 2, drop = FALSE]
adult_fates <- cbind(adult_indices, adult_fs, rpois(length(adult_fs), adult_fs*0.001))
adult_fates[,3][which(adult_fates[,3] > 0)] <- 1
surviving_adults <- adult_fates[which(adult_fates[,3] == 0), 1]
current <- current[c(surviving_juvs, surviving_adults), , drop = FALSE]
#DENSITY-DEPENDENT MORTALITY
density <- nrow(current)
density_mort <- density * (0.001 * (1 + (2 * (density/500000)))) # base mortality * (1 + (density-dependence * (density / K)))
density_mort_fates <- sample(density, density_mort)
if (length(density_mort_fates) > 0){
current <- current[-density_mort_fates, , drop = FALSE]
}
#DISTURBANCE DEATH EVENTS (this introduces ADDITIONAL mortality on top of background mortality)
if (i %in% slowstoch[r,]){ #at every time step corresponding to disturbance frequency
#juvenile deaths
too_young <- which(current[,3] < sexually_mature) #index of individuals that are JUVENILES at current (vulnerable to juvenile mortality)
juv_deaths <- sample(too_young, dist_juvmort*length(too_young)) #random dist_juvmort% sample of juveniles
if (length(juv_deaths) != 0){ #as long as there are some to kill,
current <- current[-juv_deaths, , drop = FALSE] #then kill random % of juveniles
}
#adult deaths
old_enough <- which(current[,3] >= sexually_mature) #index of individuals that are ADULTS at current (vulnerable to adult mortality)
adult_deaths <- sample(old_enough, dist_adultmort*length(old_enough)) #random % sample of adults
if (length(adult_deaths) != 0){ #as long as there are some to kill,
current <- current[-adult_deaths, , drop = FALSE] #then kill random % of adults
}
}
#END OF LIFE
end_of_life <- which(current[,3] >= death_state) #any individual that reaches death state
if (length(end_of_life) != 0){ #as long as there are any that have reached max life span of 1.5
current <- current[-end_of_life, , drop = FALSE] #those individuals are taken out of the population
}
#BIRTH EVENTS
old_enough <- which(current[,3] >= sexually_mature) #any individual that reaches age of first reproduction (0.5)
if (length(old_enough) != 0){ #as long as there are any such old_enough individuals
fecund_adults <- current[old_enough, , drop = FALSE]
fecund_adults[,2][which(fecund_adults[,2] < 0)] <- 0 #due to inheritance error, there are occassionally individuals with 'negative f', which causes errors in Poisson sampling in the next line; therefore make them f= 0
fecund_adults <- cbind(fecund_adults, rpois(nrow(fecund_adults), fecund_adults[,2]))
new_births <- fecund_adults[rep(seq(nrow(fecund_adults)), fecund_adults[,4]),] #reproduction = make N copies of old_enough individuals, where N = each old_enough individual's 'f' value
if(nrow(new_births) > 0){
new_births <- new_births[,c(1:3), drop = FALSE]
}
#MUTATION -- add error to mu and f values in just-born offspring
#for each entry in new_births, add normally distributed error with mean 0 and sd that scales to each entry
new_births[,2] <- 1/(new_births[,1]*4)
new_births[,1] <- new_births[,1] + rnorm(length(new_births[,1]), mean = 0, sd = mu_mutation_rate*mean(slow_mu_init)) #add noise to mu of offspring
new_births[,2] <- new_births[,2] + rnorm(length(new_births[,2]), mean = 0, sd = f_mutation_rate*mean(slow_f_init))
new_births[,3] <- 0 # ALL OFFPSRING START AT STATE = 0
current <- rbind(current, new_births)
}
#after all above events, below is the final current state
sim_slowstoch.ls[[i+1]] <- current
}
slowstoch_rlzs_muMEAN[[r]]<- sapply(sim_slowstoch.ls, function(x) mean(x[,1]))
slowstoch_rlzs_muVAR[[r]]<- sapply(sim_slowstoch.ls, function(x) var(x[,1]))
slowstoch_rlzs_fMEAN[[r]] <- sapply(sim_slowstoch.ls, function(x) mean(x[,2]))
slowstoch_rlzs_fVAR[[r]] <- sapply(sim_slowstoch.ls, function(x) var(x[,2]))
}
###########################################################
#### FAST STOCHASTIC FLUCTUATION SIMULATION ####
faststoch_rlzs_muMEAN <- list()
faststoch_rlzs_muVAR <- list()
faststoch_rlzs_fMEAN <- list()
faststoch_rlzs_fVAR <- list()
for (r in 1:num_real){
faststoch_mu_init <- sample(seq(0.02, 0.04, length.out = fast_num_geno*10), fast_num_geno, replace = T)
faststoch_f_init <- c(1/(fast_mu_init*4))
faststoch_states_init <-  rep(c(runif(25, 0, sexually_mature), runif(1, sexually_mature, death_state)), length.out = fast_num_geno)
sim_faststoch.ls <- list()
sim_faststoch.ls[[1]] <- cbind(faststoch_mu_init, faststoch_f_init, faststoch_states_init)
for (i in 1:num_steps){
mu_distr <- c(sim_faststoch.ls[[i]][,1]) #copy distribution of mu genotypes from previous time step
f_distr <- c(sim_faststoch.ls[[i]][,2]) #copy distribution of f genotypes from previous time step
states_distr <- c(sim_faststoch.ls[[i]][,3] + sim_faststoch.ls[[i]][,1]) #update state of each genotype by growth rate mu
current <- cbind(mu_distr, f_distr, states_distr) #collection of surviving genotypes and their states BEFORE death or repro events
#Juvenile mu & Adult f trading off with respective survival probabilities IN THE ABSENCE OF DISTURBANCE
juv_indices <- which(current[,3] < sexually_mature)
juv_mus <- current[juv_indices, 1, drop = FALSE]
#draw from poisson distribution with lambda = d (juvenile background mortality, which increases as mu increases)
juv_fates <- cbind(juv_indices, juv_mus, rpois(length(juv_mus), juv_mus*5)) # mu X 5 is roughly the range of 'd' in original analytical model
juv_fates[,3][which(juv_fates[,3] > 0)] <- 1 #any number of poisson 'events' (non-zero value) counts as death, so just call it '1'
surviving_juvs <- juv_fates[which(juv_fates[,3] == 0), 1]
adult_indices <- which(current[,3] >= sexually_mature)
adult_fs <- current[adult_indices, 2, drop = FALSE]
adult_fates <- cbind(adult_indices, adult_fs, rpois(length(adult_fs), adult_fs*0.001))
adult_fates[,3][which(adult_fates[,3] > 0)] <- 1
surviving_adults <- adult_fates[which(adult_fates[,3] == 0), 1]
current <- current[c(surviving_juvs, surviving_adults), , drop = FALSE]
#DENSITY-DEPENDENT MORTALITY
density <- nrow(current)
density_mort <- density * (0.001 * (1 + (2 * (density/500000)))) # base mortality * (1 + (density-dependence * (density / K)))
density_mort_fates <- sample(density, density_mort)
if (length(density_mort_fates) > 0){
current <- current[-density_mort_fates, , drop = FALSE]
}
#DISTURBANCE DEATH EVENTS (this introduces ADDITIONAL mortality on top of background mortality)
if (i %in% faststoch[r,]){ #at every time step corresponding to disturbance frequency
#juvenile deaths
too_young <- which(current[,3] < sexually_mature) #index of individuals that are JUVENILES at current (vulnerable to juvenile mortality)
juv_deaths <- sample(too_young, dist_juvmort*length(too_young)) #random dist_juvmort% sample of juveniles
if (length(juv_deaths) != 0){ #as long as there are some to kill,
current <- current[-juv_deaths, , drop = FALSE] #then kill random % of juveniles
}
#adult deaths
old_enough <- which(current[,3] >= sexually_mature) #index of individuals that are ADULTS at current (vulnerable to adult mortality)
adult_deaths <- sample(old_enough, dist_adultmort*length(old_enough)) #random % sample of adults
if (length(adult_deaths) != 0){ #as long as there are some to kill,
current <- current[-adult_deaths, , drop = FALSE] #then kill random % of adults
}
}
#END OF LIFE
end_of_life <- which(current[,3] >= death_state) #any individual that reaches death state
if (length(end_of_life) != 0){ #as long as there are any that have reached max life span of 1.5
current <- current[-end_of_life, , drop = FALSE] #those individuals are taken out of the population
}
#BIRTH EVENTS
old_enough <- which(current[,3] >= sexually_mature) #any individual that reaches age of first reproduction (0.5)
if (length(old_enough) != 0){ #as long as there are any such old_enough individuals
fecund_adults <- current[old_enough, , drop = FALSE]
fecund_adults[,2][which(fecund_adults[,2] < 0)] <- 0 #due to inheritance error, there are occassionally individuals with 'negative f', which causes errors in Poisson sampling in the next line; therefore make them f= 0
fecund_adults <- cbind(fecund_adults, rpois(nrow(fecund_adults), fecund_adults[,2]))
new_births <- fecund_adults[rep(seq(nrow(fecund_adults)), fecund_adults[,4]),] #reproduction = make N copies of old_enough individuals, where N = each old_enough individual's 'f' value
if(nrow(new_births) > 0){
new_births <- new_births[,c(1:3), drop = FALSE]
}
#MUTATION -- add error to mu and f values in just-born offspring
#for each entry in new_births, add normally distributed error with mean 0 and sd that scales to each entry
new_births[,2] <- 1/(new_births[,1]*4)
new_births[,1] <- new_births[,1] + rnorm(length(new_births[,1]), mean = 0, sd = mu_mutation_rate*mean(slow_mu_init)) #add noise to mu of offspring
new_births[,2] <- new_births[,2] + rnorm(length(new_births[,2]), mean = 0, sd = f_mutation_rate*mean(slow_f_init))
new_births[,3] <- 0 # ALL OFFPSRING START AT STATE = 0
current <- rbind(current, new_births)
}
#after all above events, below is the final current state
sim_faststoch.ls[[i+1]] <- current
}
faststoch_rlzs_muMEAN[[r]]<- sapply(sim_faststoch.ls, function(x) mean(x[,1]))
faststoch_rlzs_muVAR[[r]]<- sapply(sim_faststoch.ls, function(x) var(x[,1]))
faststoch_rlzs_fMEAN[[r]] <- sapply(sim_faststoch.ls, function(x) mean(x[,2]))
faststoch_rlzs_fVAR[[r]] <- sapply(sim_faststoch.ls, function(x) var(x[,2]))
}
slowstoch_rlzs_muMEAN.df <- data.frame(matrix(unlist(slowstoch_rlzs_muMEAN), nrow = num_real, byrow = T))
colnames(slowstoch_rlzs_muMEAN.df) <- c(1:(num_steps+1))
slowstoch_rlzs_muMEAN.df <- cbind("realizations" = c(1:num_real), slowstoch_rlzs_muMEAN.df)
slowstoch_rlzs_muMEAN_melt <- melt(slowstoch_rlzs_muMEAN.df, id.vars = "realizations")
slowstoch_rlzs_muVAR.df <- data.frame(matrix(unlist(slowstoch_rlzs_muVAR), nrow = num_real, byrow = T))
colnames(slowstoch_rlzs_muVAR.df) <- c(1:(num_steps+1))
slowstoch_rlzs_muVAR.df <- cbind("realizations" = c(1:num_real), slowstoch_rlzs_muVAR.df)
slowstoch_rlzs_muVAR_melt <- melt(slowstoch_rlzs_muVAR.df, id.vars = "realizations")
faststoch_rlzs_muMEAN.df <- data.frame(matrix(unlist(faststoch_rlzs_muMEAN), nrow = num_real, byrow = T))
colnames(faststoch_rlzs_muMEAN.df) <- c(1:(num_steps+1))
faststoch_rlzs_muMEAN.df <- cbind("realizations" = c(1:num_real), faststoch_rlzs_muMEAN.df)
faststoch_rlzs_muMEAN_melt <- melt(faststoch_rlzs_muMEAN.df, id.vars = "realizations")
faststoch_rlzs_muVAR.df <- data.frame(matrix(unlist(faststoch_rlzs_muVAR), nrow = num_real, byrow = T))
colnames(faststoch_rlzs_muVAR.df) <- c(1:(num_steps+1))
faststoch_rlzs_muVAR.df <- cbind("realizations" = c(1:num_real), faststoch_rlzs_muVAR.df)
faststoch_rlzs_muVAR_melt <- melt(faststoch_rlzs_muVAR.df, id.vars = "realizations")
muvar_fastfluc_end <- sapply(fastfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowfluc_end <- sapply(slowfluc_rlzs_muVAR, function(x) tail(x,1))
muvar_slowstoch_end <- sapply(slowstoch_rlzs_muVAR, function(x) tail(x,1))
muvar_faststoch_end <- sapply(faststoch_rlzs_muVAR, function(x) tail(x,1))
fvar_fastfluc_end <- sapply(fastfluc_rlzs_fVAR, function(x) tail(x,1))
fvar_slowfluc_end <- sapply(slowfluc_rlzs_fVAR, function(x) tail(x,1))
fvar_slowstoch_end <- sapply(slowstoch_rlzs_fVAR, function(x) tail(x,1))
fvar_faststoch_end <- sapply(faststoch_rlzs_fVAR, function(x) tail(x,1))
wilcox.test(log(fvar_slowfluc_end), log(fvar_fastfluc_end), var.equal = F, na.action = na.omit)
wilcox.test(log(fvar_slowstoch_end), log(fvar_faststoch_end), var.equal = F, na.action = na.omit)
wilcox.test(log(fvar_slowfluc_end), log(fvar_slowstoch_end), var.equal = F, na.action = na.omit)
wilcox.test(log(fvar_fastfluc_end), log(fvar_faststoch_end), var.equal = F, na.action = na.omit)
wilcox.test(log(muvar_slowfluc_end), log(muvar_fastfluc_end), var.equal = F, na.action = na.omit)
wilcox.test(log(muvar_slowstoch_end), log(muvar_faststoch_end), var.equal = F, na.action = na.omit)
wilcox.test(log(muvar_slowfluc_end), log(muvar_slowstoch_end), var.equal = F, na.action = na.omit)
wilcox.test(log(muvar_fastfluc_end), log(muvar_faststoch_end), var.equal = F, na.action = na.omit)
t.test(log(fvar_slowfluc_end), log(fvar_fastfluc_end), var.equal = F, na.action = na.omit)
t.test(log(fvar_slowfluc_end), log(fvar_fastfluc_end), var.equal = F, na.action = na.omit)
t.test(log(fvar_slowstoch_end), log(fvar_faststoch_end), var.equal = F, na.action = na.omit)
t.test(log(fvar_slowfluc_end), log(fvar_fastfluc_end), var.equal = F, na.action = na.omit)
ks.test(log(fvar_slowfluc_end), "pnorm")
shapiro.test(fvar_slowfluc_end)
shapiro.test(fvar_fastfluc_end)
shapiro.test(muvar_fastfluc_end)
shapiro.test(muvar_faststoch_end)
shapiro.test(fvar_faststoch_end)
shapiro.test(log(fvar_faststoch_end))
shapiro.test(fvar_faststoch_end)
qqnorm(fvar_slowfluc_end)
qqnorm(fvar_fastfluc_end)
qqnorm(log(fvar_fastfluc_end))
shapiro.test(muvar_fastfluc_end)
shapiro.test(muvar_faststoch_end)
shapiro.test(muvar_faststoch_end)
ks.test(muvar_faststoch_end, "pnorm")
shapiro.test(fvar_slowfluc_end)
shapiro.test(fvar_fastfluc_end)
shapiro.test(fvar_slowstoch_end)
shapiro.test(fvar_faststoch_end)
shapiro.test(muvar_slowfluc_end)
shapiro.test(muvar_fastfluc_end)
shapiro.test(muvar_slowstoch_end)
shapiro.test(muvar_faststoch_end)
t.test(fvar_slowfluc_end, fvar_fastfluc_end, var.equal = F, na.action = na.omit)
t.test(fvar_slowfluc_end, fvar_slowstoch_end, var.equal = F, na.action = na.omit)
t.test(fvar_fastfluc_end), fvar_faststoch_end, var.equal = F, na.action = na.omit)
t.test(fvar_fastfluc_end, fvar_faststoch_end, var.equal = F, na.action = na.omit)
qqnorm(fvar_fastfluc_end)
qqline(fvar_fastfluc_end)
qqnorm(fvar_faststoch_end)
qqline(fvar_faststoch_end)
qqnorm(muvar_slowstoch_end)
qqnorm(muvar_faststoch_end)
qqnorm(muvar_fastfluch_end)
qqnorm(muvar_fastfluc_end)
qqline(muvar_fastfluc_end)
getwd()
setwd("~/Documents/New Papers/Slower_cycles/GitHub_ready_data&code/SlowerCycles_LHVar/data_files/")
#### f ####
# read fecundity data; select relevant columns
f.data <- read.csv("EvolExp_fecundity_data.csv")
# MU
# read mu data
mu.data <- read.csv("EvolExp_maturation_data.csv")
